#!/usr/bin/env coffee

program = require 'commander'
colors = require 'colors'
_ = require 'underscore'
CommanderUtils = require '../src/lib/commander_utils'

process.bin = process.title = 'tinker'

program.constructor::defaultOptions = ->
  @
    .option('-d, --directory <name>', 'Directory')
    .option('-f, --force', 'Force the operation')
    .option('-g, --glob', 'Add a glob')
    .option('-b, --bower', 'Bower only')
    .option('-n, --npm', 'NPM only')
    # .option('-c, --component', 'Component.io only')

program
  .version('0.0.1')

program
  .command('init [glob]')
  .description('Initialize tinker')
  .defaultOptions()
  .action (glob) ->
    options = _.defaults(CommanderUtils.extractCommandOptions(program), {glob: glob or '*'})
    (require '../src').init options, (err) ->
      message = "tinker init #{options.glob} #{if err then ('failed. ' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('config *')
  .description('Configure tinker')
  .defaultOptions()
  .action ->
    args = Array::splice.call(arguments, 0); args.pop()
    options = CommanderUtils.extractCommandOptions(program)
    (require '../src').config args, options, (err) ->
      message = "tinker config #{args.join(' ')} #{if err then ('failed. ' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('install [glob]')
  .description('Install modules')
  .defaultOptions()
  .action (glob) ->
    options = _.defaults(CommanderUtils.extractCommandOptions(program), {glob: glob or '*'})
    (require '../src').install options, (err) ->
      message = "tinker install #{if err then ('failed. ' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('uninstall [glob]')
  .defaultOptions()
  .description('Install modules')
  .action (glob) ->
    options = _.defaults(CommanderUtils.extractCommandOptions(program), {glob: glob or '*'})
    (require '../src').uninstall options, (err) ->
      message = "tinker uninstall #{if err then ('failed. ' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('on [glob]')
  .defaultOptions()
  .description('Enable tinker for specified modules')
  .action (glob) ->
    options = _.defaults(CommanderUtils.extractCommandOptions(program), {glob: glob or '*'})
    (require '../src').on options, (err) ->
      message = "tinker on #{options.glob} #{if err then ('failed. ' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('off [glob]')
  .defaultOptions()
  .description('Disable tinker for specified modules')
  .action (glob) ->
    options = _.defaults(CommanderUtils.extractCommandOptions(program), {glob: glob or '*'})
    (require '../src').off options, (err) ->
      message = "tinker on #{options.glob} #{if err then ('failed. ' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('cache <action>')
  .description('Performs an action on the cache')
  .action (action)->
    options = CommanderUtils.extractCommandOptions(program)
    (require '../src').cache action, options, (err) ->
      message = "tinker cache #{action} #{if err then ('failed. ' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('exec *')
  .defaultOptions()
  .description('Run a command command on a module')
  .action (glob) ->
    args = Array::splice.call(arguments, 1); args.pop()
    options = _.defaults(CommanderUtils.extractCommandOptions(program), {glob: glob or '*'})
    (require '../src').exec args, options, (err) ->
      message = "tinker #{options.glob} #{args.join(' ')} #{if err then ('failed. ' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('*')
  .defaultOptions()
  .description('Run a command command on a module')
  .action -> process.argv.splice(2, 0, 'exec'); program.parse(process.argv) # default to exec

program.parse(process.argv)
