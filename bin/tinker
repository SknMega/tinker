#!/usr/bin/env coffee

program = require 'commander'

process.bin = process.title = 'tinker'

class CommanderUtils
  @getOptionsOwner: (program, command_name) ->
    return command for command in program.commands when command._name is command_name
    return null

  @extractCommandOptions: (program) -> CommanderUtils.extractOptions(program, program.args[program.args.length-1]._name)
  @extractOptions: (program, command_name) ->
    program = CommanderUtils.getOptionsOwner(program, command_name) if command_name
    (console.log "Couldn't find options for #{command_name}"; return {}) unless program

    options = if program.parent then CommanderUtils.extractOptions(program.parent) else {}
    for option_info in program.options
      key = option_info.long.replace('--', '')
      (options[key] = program[key] if program.hasOwnProperty(key))
    return options

program
  .version('0.0.1')

program
  .command('on <glob>')
  .option('-d, --directory <name>', 'Directory')
  .option('-b, --bower', 'Bower only')
  .option('-n, --npm', 'NPM only')
  .description('Enable tinker for specified modules')
  .action (glob)->
    options = CommanderUtils.extractCommandOptions(program)
    (require './lib').on glob, options, -> process.exit(0)

program
  .command('off <glob>')
  .option('-d, --directory <name>', 'Directory')
  .description('Disable tinker for specified modules')
  .action (glob)->
    options = CommanderUtils.extractCommandOptions(program)
    (require './lib').off glob, options, -> process.exit(0)

###
# Unknown
###
program
  .command('*')
  .description('catch all for unrecognized commands')
  .action ->
    console.log "Unrecognized command: #{process.argv[2]}"

program.parse(process.argv)
