#!/usr/bin/env coffee

program = require 'commander'
colors = require 'colors'

process.bin = process.title = 'tinker'

class CommanderUtils
  @getOptionsOwner: (program, command_name) ->
    return command for command in program.commands when command._name is command_name
    return null

  @extractCommandOptions: (program) -> CommanderUtils.extractOptions(program, program.args[program.args.length-1]._name)
  @extractOptions: (program, command_name) ->
    program = CommanderUtils.getOptionsOwner(program, command_name) if command_name
    (console.log "Couldn't find options for #{command_name}"; return {}) unless program

    options = if program.parent then CommanderUtils.extractOptions(program.parent) else {}
    for option_info in program.options
      key = option_info.long.replace('--', '')
      (options[key] = program[key] if program.hasOwnProperty(key))
    return options

program.constructor::defaultOptions = ->
  @
    .option('-d, --directory <name>', 'Directory')
    .option('-f, --force', 'Force the operation')
    .option('-b, --bower', 'Bower only')
    .option('-n, --npm', 'NPM only')
    .option('-c, --component', 'Component.io only')

program
  .version('0.0.1')

program
  .command('install')
  .description('Install modules')
  .defaultOptions()
  .action (glob)->
    options = CommanderUtils.extractCommandOptions(program)
    (require '../src').install options, (err) ->
      message = "tinker install #{if err then ('failed. Error' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('uninstall')
  .defaultOptions()
  .description('Install modules')
  .action (glob)->
    options = CommanderUtils.extractCommandOptions(program)
    (require '../src').uninstall options, (err) ->
      message = "tinker uninstall #{if err then ('failed. Error' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('on <glob>')
  .defaultOptions()
  .description('Enable tinker for specified modules')
  .action (glob)->
    options = CommanderUtils.extractCommandOptions(program)
    (require '../src').on glob, options, (err) ->
      message = "tinker on #{glob} #{if err then ('failed. Error' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('off <glob>')
  .defaultOptions()
  .description('Disable tinker for specified modules')
  .action (glob)->
    options = CommanderUtils.extractCommandOptions(program)
    (require '../src').off glob, options, (err) ->
      message = "tinker on #{glob} #{if err then ('failed. Error' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

program
  .command('cache <action>')
  .description('Performs an action on the cache')
  .action (action)->
    options = CommanderUtils.extractCommandOptions(program)
    (require '../src').cache action, options, (err) ->
      message = "tinker cache #{action} #{if err then ('failed. Error' + err.toString()) else 'succeeded'}"
      if err then console.log(message.red) else console.log(message.green)
      process.exit(0)

###
# Unknown
###
program
  .command('*')
  .description('catch all for unrecognized commands')
  .action ->
    console.log "Unrecognized command: #{process.argv[2]}"

program.parse(process.argv)
